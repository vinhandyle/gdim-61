//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Map"",
            ""id"": ""8237abda-fe58-428d-bece-b91fd6ae7fbe"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f2a146ab-8b00-4bdd-b6e1-b6219573f4a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""PassThrough"",
                    ""id"": ""14af2ddd-a2c8-4a97-8c5a-7649ce9a2273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d28eded8-387d-403e-bff5-17220c084938"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eeb84c4d-a9a6-47a0-9dd1-838f3b28bf1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6b29be92-252d-4f60-abb5-fd86607164c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0446c761-1c98-4fbe-9d40-2440920ff55d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""51dbd428-05c3-4478-b5ec-545f78ba4c07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94f2b0b5-ee25-4cbd-92ba-3d7ef06d86e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55fea0d8-23d4-4acd-ac3d-a2e0cb26a1e6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf9db2bd-35ec-4ae6-8c9c-a30ad882d5bf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87413963-c7f9-49d5-83d2-cb3c19b277f1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8b6f661-dbcc-4291-bb42-944549f13174"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed57337e-9506-411d-b344-1c5a3a372c38"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6bd2f82-9673-4e15-a4f8-195240160efb"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_Left = m_Map.FindAction("Left", throwIfNotFound: true);
        m_Map_Right = m_Map.FindAction("Right", throwIfNotFound: true);
        m_Map_Up = m_Map.FindAction("Up", throwIfNotFound: true);
        m_Map_Down = m_Map.FindAction("Down", throwIfNotFound: true);
        m_Map_Jump = m_Map.FindAction("Jump", throwIfNotFound: true);
        m_Map_Dash = m_Map.FindAction("Dash", throwIfNotFound: true);
        m_Map_Attack = m_Map.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_Left;
    private readonly InputAction m_Map_Right;
    private readonly InputAction m_Map_Up;
    private readonly InputAction m_Map_Down;
    private readonly InputAction m_Map_Jump;
    private readonly InputAction m_Map_Dash;
    private readonly InputAction m_Map_Attack;
    public struct MapActions
    {
        private @PlayerActionControls m_Wrapper;
        public MapActions(@PlayerActionControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Map_Left;
        public InputAction @Right => m_Wrapper.m_Map_Right;
        public InputAction @Up => m_Wrapper.m_Map_Up;
        public InputAction @Down => m_Wrapper.m_Map_Down;
        public InputAction @Jump => m_Wrapper.m_Map_Jump;
        public InputAction @Dash => m_Wrapper.m_Map_Dash;
        public InputAction @Attack => m_Wrapper.m_Map_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_MapActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_MapActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnRight;
                @Up.started -= m_Wrapper.m_MapActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_MapActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnDown;
                @Jump.started -= m_Wrapper.m_MapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_MapActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnDash;
                @Attack.started -= m_Wrapper.m_MapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IMapActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
